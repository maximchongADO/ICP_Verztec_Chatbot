/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/64f1a714fe61576b46f27ca2.glb -o src/components/Avatar.jsx -k -r public
*/

import { Html, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import React, { useEffect, useRef, useState } from "react";

import * as THREE from "three";
import { useChat } from "../hooks/useChat";
import { SynchronizedText } from "./SynchronizedText";

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

export function Avatar(props) {
  const { nodes, materials, scene } = useGLTF('/avatar/models/685424ed261493e82da26cc9.glb');
  const { message, onMessagePlayed } = useChat();
  const [lipsync, setLipsync] = useState();
  const [audio, setAudio] = useState();
  const [isProcessing, setIsProcessing] = useState(false);
  const [lastProcessedMessageId, setLastProcessedMessageId] = useState(null);
  const [isSpeaking, setIsSpeaking] = useState(false); // Add speaking state
  const group = useRef();

  // Handle new message with audio and lip sync
  useEffect(() => {
    console.log('Avatar processing message:', message?.id, message?.type, !!message?.audio);
    
    // Guard against double processing
    if (!message || isProcessing || message.id === lastProcessedMessageId) {
      console.log('Skipping message processing:', { 
        hasMessage: !!message, 
        isProcessing, 
        alreadyProcessed: message?.id === lastProcessedMessageId 
      });
      return;
    }
    
    // Only process bot messages with audio
    if (message.type !== 'bot' || !message.audio) {
      console.log('Message not suitable for avatar:', { type: message.type, hasAudio: !!message.audio });
      return;
    }
    
    console.log('Starting avatar message processing for message:', message.id);
    setIsProcessing(true);
    setLastProcessedMessageId(message.id);
    setLipsync(message.lipsync);
    
    if (message.audio) {
      // Stop any currently playing audio
      if (audio) {
        console.log('Stopping previous audio');
        audio.pause();
        audio.currentTime = 0;
        setIsSpeaking(false);
      }
      
      const audioElement = new Audio("data:audio/mp3;base64," + message.audio);
      
      audioElement.onloadstart = () => {
        console.log('Audio loading started');
      };
      
      audioElement.oncanplay = () => {
        console.log('Audio can play');
      };

      audioElement.onplay = () => {
        console.log('Audio started playing');
        setIsSpeaking(true);
      };
      
      audioElement.onended = () => {
        console.log('Audio playback ended');
        setIsSpeaking(false);
        setIsProcessing(false);
        onMessagePlayed();
      };
      
      audioElement.onerror = (error) => {
        console.error('Audio playback failed:', error);
        setIsSpeaking(false);
        setIsProcessing(false);
        onMessagePlayed();
      };
      
      console.log('Starting audio playback');
      audioElement.play().then(() => {
        console.log('Audio playback started successfully');
      }).catch(error => {
        console.error('Audio play failed:', error);
        setIsSpeaking(false);
        setIsProcessing(false);
        onMessagePlayed();
      });
      
      setAudio(audioElement);
    } else {
      setIsProcessing(false);
    }
  }, [message, onMessagePlayed, audio, isProcessing, lastProcessedMessageId]);

  // Cleanup effect
  useEffect(() => {
    return () => {
      if (audio) {
        audio.pause();
        audio.currentTime = 0;
      }
    };
  }, []);

  const lerpMorphTarget = (target, value, speed = 0.1) => {
    scene.traverse((child) => {
      if (child.isSkinnedMesh && child.morphTargetDictionary) {
        const index = child.morphTargetDictionary[target];
        if (
          index === undefined ||
          child.morphTargetInfluences[index] === undefined
        ) {
          return;
        }
        child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );
      }
    });
  };

  const [blink, setBlink] = useState(false);

  useFrame(() => {
    // Handle blinking
    lerpMorphTarget("eyeBlinkLeft", blink ? 1 : 0, 0.5);
    lerpMorphTarget("eyeBlinkRight", blink ? 1 : 0, 0.5);

    // LIPSYNC - This is the key part for mouth animation
    const appliedMorphTargets = [];
    if (message && lipsync && audio) {
      const currentAudioTime = audio.currentTime;
      for (let i = 0; i < lipsync.mouthCues.length; i++) {
        const mouthCue = lipsync.mouthCues[i];
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime <= mouthCue.end
        ) {
          appliedMorphTargets.push(corresponding[mouthCue.value]);
          lerpMorphTarget(corresponding[mouthCue.value], 1, 0.2);
          break;
        }
      }
    }

    // Reset unused mouth shapes
    Object.values(corresponding).forEach((value) => {
      if (appliedMorphTargets.includes(value)) {
        return;
      }
      lerpMorphTarget(value, 0, 0.1);
    });
  });

  // Auto-blink effect
  useEffect(() => {
    let blinkTimeout;
    const nextBlink = () => {
      blinkTimeout = setTimeout(() => {
        setBlink(true);
        setTimeout(() => {
          setBlink(false);
          nextBlink();
        }, 200);
      }, THREE.MathUtils.randInt(1000, 5000));
    };
    nextBlink();
    return () => clearTimeout(blinkTimeout);
  }, []);

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="Wolf3D_Body"
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Bottom"
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Footwear"
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Top"
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Hair"
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      {/* Synchronized text display - positioned closer beside avatar */}
      {message && message.text && (
        <Html
          position={[1.2, 1.2, 0]} // Moved much closer to avatar
          style={{
            pointerEvents: 'none',
            userSelect: 'none',
            transform: 'translate(-50%, -50%)',
            zIndex: 1000
          }}
        >
          <div className="speech-bubble">
            <div className="speech-bubble-arrow"></div>
            <SynchronizedText
              text={message.text}
              audio={message.audio}
              lipsync={message.lipsync}
              isPlaying={isSpeaking}
            />
          </div>
        </Html>
      )}
    </group>
  );
}
useGLTF.preload('/avatar/models/685424ed261493e82da26cc9.glb');
useGLTF.preload('/avatar/models/animations.glb');
